[
  {
    "objectID": "review-guide.html",
    "href": "review-guide.html",
    "title": "How review works",
    "section": "",
    "text": "Overview of review process\n  \n  What happens after review?\n  \n  Instructions for package authors\n  Instructions for reviewers\n  Checklist\n  \n  Information and metadata\n  Documentation\n  Testing\n  Code\n  \n  Glossary\n  \n  API - application programming interface\n  Version control\n  Repository\n  License"
  },
  {
    "objectID": "review-guide.html#overview-of-review-process",
    "href": "review-guide.html#overview-of-review-process",
    "title": "How review works",
    "section": "Overview of review process",
    "text": "Overview of review process\n\nPackage author initiates a github issue under the software-review repository of the SMARTbiomed github organization\nThe software coordinator does an initial review\nOnce the package has passed initial review, they find two peer reviewers\nPeer reviewers return comments as github comments under the issue\nAuthor responds to comments and updates package, as needed\nDecision is made, and once accepted, package is posted on the SMARTbiomed website and publicized with a “peer-reviewed” badge that looks like this \nAuthor is encouraged to draft a software manuscript for submission to an appropriate scientific journal e.g., Journal of Statistical Software, the R journal, Journal of Computational and Graphical Statistics, Bioinformatics.\n\n\nWhat happens after review?\n\nSoftware coordinator regularly reviews individual packages (every 4 months), and links packages that work together, checks for maintenance issues such as broken dependencies or unaddressed bug reports. Also can identify opportunities for packages to work together in a bigger pipeline and develop tutorials or teaching materials\nSoftware coordinator reviews processes (annually) to identify areas for improvement or modification. Provides a report of progress made and lessons learned.\nDevelop workshops for collaborators to learn about the guidelines and specific issues to enhance package development"
  },
  {
    "objectID": "review-guide.html#instructions-for-package-authors",
    "href": "review-guide.html#instructions-for-package-authors",
    "title": "How review works",
    "section": "Instructions for package authors",
    "text": "Instructions for package authors\nIf you are the author of a software package that you would like to be reviewed, prepare the following things:\n\nA link to the package source code available in a public repository, e.g., Github.\nA cover letter indicating\n\nWhat the package goals are\nWhat the other available packages with similar goals are\nWhy this one is needed\nA clearly scientifically motivated example in a common, complex disease setting\nAn indication of what theme/category it belongs to (causal inference, risk prediction, machine learning)\n\nSuggestions for reviewers, check the list of mentors\nA methods paper or manuscript, if one is available\n\nWhen you are ready, create a github issue following the review template. If you are unsure, you can submit a pre-submission inquiry to get a fast response from the software coordinator.\nPlease read our code of conduct. Information about the status of your review and related comments will be associated with that github issue. Make sure your notification settings are such that you will recieve emails when the issue is updated."
  },
  {
    "objectID": "review-guide.html#instructions-for-reviewers",
    "href": "review-guide.html#instructions-for-reviewers",
    "title": "How review works",
    "section": "Instructions for reviewers",
    "text": "Instructions for reviewers\nYou will be tagged and invited to comment on a github issue that contains information about the package to be reviewed. Follow the instructions and leave a comment on the github issue with your review. Please read our code of conduct.\nThe purpose of the code review is to learn from each other and improve the quality of our research software. This checklist is merely a guide you can use to check for the presence and quality of these items, and to identify deficiencies that can be improved. The list is not exhaustive, nor is it expected that every single item is checked.\nRefer to this checklist during your review, and remember to be constructive and kind in your comments."
  },
  {
    "objectID": "review-guide.html#checklist",
    "href": "review-guide.html#checklist",
    "title": "How review works",
    "section": "Checklist",
    "text": "Checklist\n\nInformation and metadata\n\nPackage title short and descriptive\nSoftware category (e.g., which theme or themes does it fall under) and keywords provided\nSource code publicly available on an appropriate repository\nOSI accepted license clearly stated and included with the source code.\nVersion controlled (preferably with git) and using semantic versioning starting from 0.1.0:\n\nGiven a version number MAJOR.MINOR.PATCH, increment the:\nMAJOR version when you make incompatible API changes MINOR version when you add functionality in a backward compatible manner PATCH version when you make backward compatible bug fixes\n\nList of package maintainers (with email), authors and contributors, including authors of any code copied or included from other sources\nPackage dependencies clearly indicated, including what systems the software is confirmed to run on (e.g., linux, windows).\nPackages that require non standard build tools, dependencies that are not easily obtained, or have other specialized requirements should consider providing a dockerfile and including examples of how it is used.\nLink to bug tracker provided\n\n\n\nDocumentation\n\nReadme\nShort description of the goals/main purpose of the package avoiding the use of jargon\nInstallation instructions\nBrief demonstration of the usage of the package\nDescription of how the package relates to other packages in the organization, and how it compares to packages with similar - [ ] goals\nLinks to further documentation and tutorials\nLinks to pre-built binaries (using r-universe for R packages for example)\nTutorials/vignettes\nExtended and completely reproducible demonstration of usage with strongly motivated examples and interpretation of results in the scientific context (task oriented, i.e., how to do the analysis)\nIllustration of theory/methodology and comparison to alternatives (enhances understanding of methodology)\nIllustration/instructions about implementation and possible extensions/connections to other software packages within the organization (enhances understanding of software)\nFunction reference – for each function in the package\nDescription of what the function does\nFunction inputs description\nFunction output description\nExamples\nChangelog/news\nWhat has changed since the previous version\nDocumentation website\nE.g., using pkgdown or sphinx\nIncludes all of the above in an easily browsable setting\n\n\n\nTesting\n\nUnit tests\nAll functions should be tested to ensure functionality and input/output expectations are met\nValidation tests\nStatistical methods should use benchmark data or simulation studies to demonstrate validity of the method, e.g., type I error, bias, efficiency, whatever is relevant to the method. The code to make the simulated data, or the data itself should be provided with the code as an example for users so the code editor can run spot-checking.\nIntegration tests\nIf the package interacts with other software packages, tests should check that they function together as expected\nTests of graphical interfaces should be present where applicable\nTests should be automatically run during a build process\n\n\n\nCode\n\nCode is organized into separate source files in a sensible manner with descriptive names\nFunctions and arguments names work together to form a common, logical programming API that is easy to read and auto-complete\nConsider an object_verb() naming scheme for functions or object.verb() for object oriented paradigms, where object refers to the data and verb the primary action. This can be extended to include multiple words separated by underscores in order to be as descriptive as necessary. This scheme helps make code readable and easy to auto-complete.\nFor functions that manipulate an object/data and return an object/data of the same type, make the object/data the first argument of the function so as to enhance compatibility with pipe operators (base R’s |&gt;, magrittr’s %&gt;%) and with other packages\nWe recommend using the following style guides for R and python. Other languages may also have “official” or highly regarded style guides. While the use of a particular style is not required, it is required to use the same style consistently throughout the package.\nAvoid function name conflicts with base packages or other popular ones\nArgument naming and order should be consistent across functions that use similar inputs.\nFunctions should return coherent data structures rather than making modifications to the global environment and/or output to the hard disk as side effects. Output to disk should be explicit and obvious to the user.\n\nAny obvious inefficiencies should be fixed (create separate lists for different languages)\nInput validation/checking"
  },
  {
    "objectID": "review-guide.html#glossary",
    "href": "review-guide.html#glossary",
    "title": "How review works",
    "section": "Glossary",
    "text": "Glossary\n\nAPI - application programming interface\nThis refers to the way that users and other software interact with your software package. It could be using a graphical interface, or using code. It generally refers to the manner of getting your package to do something, and how your package returns a result.\n\n\nVersion control\nThe practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time. Examples of version control systems are git and svn.\n\n\nRepository\nA centralized, external storage location for software packages. Examples include github, CRAN, Bioconductor.\n\n\nLicense\nA software license is a document that provides legal guidelines for the use and distribution of software. These is a list of open source licenses here: https://opensource.org/licenses."
  },
  {
    "objectID": "code-of-conduct.html",
    "href": "code-of-conduct.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "On this page\n   \n  \n  Expected Behavior\n  Unacceptable Behavior\n  Consequences of Code of Conduct Violations\n  Reporting Guidelines\n  Credits\n  \n\nWe are committed to providing a safe, inclusive, welcoming, and harassment-free experience for everyone.\nWe try to cultivate a community with shared values, where people are comfortable exploring ideas, asking questions, and saying things like “I don’t understand” or “Why”. Assume competence in the people you interact with. There are no stupid questions.\nBe considerate in speech and actions, and actively seek to acknowledge and respect the boundaries of people who participate in our activities.\nTake care of each other. Alert Michael Sachs if you notice a dangerous situation, someone in distress, or a potential violation of this Code of Conduct, even if it seems inconsequential. If Michael is the subject of the Alert or has a conflict of interest, please inform Naomi Wray, the director of the centre.\n\nExpected Behavior\nAll participants are expected to behave in accordance with professional standards, with both this Code of Conduct as well as their respective employer’s policies governing appropriate workplace behavior, and all applicable laws.\nWe’re committed to providing welcome environments where people behave according to professional standards. We expect everyone to contribute to a welcoming, civil, safe, and tolerant environment.\nExamples of encouraged behavior that contributes to a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for everyone in the group\nShowing empathy towards other participants\n\n\n\nUnacceptable Behavior\nWe do not tolerate harassment in any form. Adherence to our Code of Conduct requires refraining from demeaning, discriminatory, or harassing behavior and speech including, but not limited to:\n\noffensive comments related to gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion (or lack thereof), nationality, native language, or technology choices\nunwelcome comments regarding a person’s lifestyle choices and practices, including those related to food, health, parenting, drugs, or career stage\nsustained or willful disruption of discussions, talks, or other events, including online discussion.\ndeliberate intimidation\ncontinued one-on-one communication after requests to cease\nunwanted photography or recording, including logging online activity for harassment purposes\npattern of inappropriate social contact, such as requesting/assuming inappropriate levels of intimacy with others\ninappropriate physical contact without consent or after a request to stop. In virtual settings, inappropriate simulated physical contact used without consent, such as textual descriptions like “hug” or “backrub” or emojis representing such contacts.\nstalking or following behavior, including in virtual settings, such as persistent unwanted direct messages, sending unwanted pictures or malware links, or logging online activity for harassment purposes.\nthreats of violence or incitement of violence towards any individual, including encouraging a person to commit suicide or to engage in self-harm\nuse of sexual or discriminatory imagery, comments, or jokes\nunwelcome sexual attention, which can include inappropriate questions of a sexual nature, asking for sexual favors, or repeatedly asking for dates or contact information.\ndeliberate “outing” of any aspect of a person’s identity without their consent except as necessary to protect vulnerable people from intentional abuse\ndeliberate misgendering or use of “dead” or rejected names\nnon-consensual publication of non-harassing private communication, including screenshots of private discussion channels or direct messages.\n\n\n\nConsequences of Code of Conduct Violations\nParticipants who are asked to stop any inappropriate behavior are expected to comply immediately. This applies to any events and platforms, either online or in-person. If a participant engages in behavior that violates this code of conduct, the leadership may warn the offender, ask them to leave the group or meeting, or engage higher-level leadership and/or law enforcement to investigate the Code of Conduct violation and impose appropriate sanctions.\nPotential responses include:\n\nban from the meetings and virtual spaces in order to stop the inappropriate behavior;\na formal warning to stop the harassing behavior;\nexpulsion from the group;\ncancellation or early termination of employment or other contributions to the group.\n\n\n\nReporting Guidelines\nIf you experience or witness unacceptable behavior, or have any other concerns, please submit a report to the software coordinator Michael Sachs as soon as possible either by email or by contacting him directly. If Michael has a conflict of interest with a report either directly or via a close personal relationship, an alternative point of contact is Naomi Wray, the director of the centre. In that case, Michael will be recused and will not have access to the content or process of the report followup.\nIf you are planning to attend an upcoming event or join an online channel, and have concerns regarding another individual who may be present, please submit a report as described above. We will work with you to take precautions to ensure your comfort and safety. These precautions may include: providing an escort, preparing onsite event staff, and/or providing on-site contact cell phone numbers for immediate contact. In some cases, we may take action to prevent a harasser from participating in the event.\n\n\nCredits\nThis Code of Conduct has been influenced by and adapted from the rOpenSci Code of Conduct (https://ropensci.org/code-of-conduct/)."
  },
  {
    "objectID": "dev-guide.html",
    "href": "dev-guide.html",
    "title": "Resources for developers",
    "section": "",
    "text": "General development guides\n  \n  R\n  Python\n  \n  Checklist\n  \n  Information and metadata\n  Documentation\n  Testing\n  Code\n  \n  Glossary\n  \n  API - application programming interface\n  Version control\n  Repository\n  License"
  },
  {
    "objectID": "dev-guide.html#general-development-guides",
    "href": "dev-guide.html#general-development-guides",
    "title": "Resources for developers",
    "section": "General development guides",
    "text": "General development guides\n\nR\n\n“R Packages” by Hadley Wickham and Jennifer Bryan\n\n\n\nPython\n\n“Python packages” by Tomas Beuzen and Tiffany Timbers"
  },
  {
    "objectID": "dev-guide.html#checklist",
    "href": "dev-guide.html#checklist",
    "title": "Resources for developers",
    "section": "Checklist",
    "text": "Checklist\nPackage authors should strive to include everything on this checklist in their package in the way that is standardized and accepted for the major repositories for the software language, e.g., CRAN for R packages or PyPI for python packages.\n\nInformation and metadata\n\nPackage title short and descriptive\nSoftware category (e.g., which theme or themes does it fall under) and keywords provided\nSource code publicly available on an appropriate repository\nOSI accepted license clearly stated and included with the source code.\nVersion controlled (preferably with git) and using semantic versioning starting from 0.1.0:\n\nGiven a version number MAJOR.MINOR.PATCH, increment the:\nMAJOR version when you make incompatible API changes MINOR version when you add functionality in a backward compatible manner PATCH version when you make backward compatible bug fixes\n\nList of package maintainers (with email), authors and contributors, including authors of any code copied or included from other sources\nPackage dependencies clearly indicated, including what systems the software is confirmed to run on (e.g., linux, windows).\nPackages that require non standard build tools, dependencies that are not easily obtained, or have other specialized requirements should consider providing a dockerfile and including examples of how it is used.\nLink to bug tracker provided\n\n\n\nDocumentation\n\nReadme\nShort description of the goals/main purpose of the package avoiding the use of jargon\nInstallation instructions\nBrief demonstration of the usage of the package\nDescription of how the package relates to other packages in the organization, and how it compares to packages with similar - [ ] goals\nLinks to further documentation and tutorials\nLinks to pre-built binaries (using r-universe for R packages for example)\nTutorials/vignettes\nExtended and completely reproducible demonstration of usage with strongly motivated examples and interpretation of results in the scientific context (task oriented, i.e., how to do the analysis)\nIllustration of theory/methodology and comparison to alternatives (enhances understanding of methodology)\nIllustration/instructions about implementation and possible extensions/connections to other software packages within the organization (enhances understanding of software)\nFunction reference – for each function in the package\nDescription of what the function does\nFunction inputs description\nFunction output description\nExamples\nChangelog/news\nWhat has changed since the previous version\nDocumentation website\nE.g., using pkgdown or sphinx\nIncludes all of the above in an easily browsable setting\n\n\n\nTesting\n\nUnit tests\nAll functions should be tested to ensure functionality and input/output expectations are met\nValidation tests\nStatistical methods should use benchmark data or simulation studies to demonstrate validity of the method, e.g., type I error, bias, efficiency, whatever is relevant to the method. The code to make the simulated data, or the data itself should be provided with the code as an example for users so the code editor can run spot-checking.\nIntegration tests\nIf the package interacts with other software packages, tests should check that they function together as expected\nTests of graphical interfaces should be present where applicable\nTests should be automatically run during a build process\n\n\n\nCode\n\nCode is organized into separate source files in a sensible manner with descriptive names\nFunctions and arguments names work together to form a common, logical programming API that is easy to read and auto-complete\nConsider an object_verb() naming scheme for functions or object.verb() for object oriented paradigms, where object refers to the data and verb the primary action. This can be extended to include multiple words separated by underscores in order to be as descriptive as necessary. This scheme helps make code readable and easy to auto-complete.\nFor functions that manipulate an object/data and return an object/data of the same type, make the object/data the first argument of the function so as to enhance compatibility with pipe operators (base R’s |&gt;, magrittr’s %&gt;%) and with other packages\nWe recommend using the following style guides for R and python. Other languages may also have “official” or highly regarded style guides. While the use of a particular style is not required, it is required to use the same style consistently throughout the package.\nAvoid function name conflicts with base packages or other popular ones\nArgument naming and order should be consistent across functions that use similar inputs.\nFunctions should return coherent data structures rather than making modifications to the global environment and/or output to the hard disk as side effects. Output to disk should be explicit and obvious to the user.\n\nAny obvious inefficiencies should be fixed (create separate lists for different languages)\nInput validation/checking"
  },
  {
    "objectID": "dev-guide.html#glossary",
    "href": "dev-guide.html#glossary",
    "title": "Resources for developers",
    "section": "Glossary",
    "text": "Glossary\n\nAPI - application programming interface\nThis refers to the way that users and other software interact with your software package. It could be using a graphical interface, or using code. It generally refers to the manner of getting your package to do something, and how your package returns a result.\n\n\nVersion control\nThe practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time. Examples of version control systems are git and svn.\n\n\nRepository\nA centralized, external storage location for software packages. Examples include github, CRAN, Bioconductor.\n\n\nLicense\nA software license is a document that provides legal guidelines for the use and distribution of software. These is a list of open source licenses here: https://opensource.org/licenses."
  },
  {
    "objectID": "checklist.html",
    "href": "checklist.html",
    "title": "SMARTbiomed software development",
    "section": "",
    "text": "Package title short and descriptive\nSoftware category (e.g., which theme or themes does it fall under) and keywords provided\nSource code publicly available on an appropriate repository\nOSI accepted license clearly stated and included with the source code.\nVersion controlled (preferably with git) and using semantic versioning starting from 0.1.0:\n\nGiven a version number MAJOR.MINOR.PATCH, increment the:\nMAJOR version when you make incompatible API changes MINOR version when you add functionality in a backward compatible manner PATCH version when you make backward compatible bug fixes\n\nList of package maintainers (with email), authors and contributors, including authors of any code copied or included from other sources\nPackage dependencies clearly indicated, including what systems the software is confirmed to run on (e.g., linux, windows).\nPackages that require non standard build tools, dependencies that are not easily obtained, or have other specialized requirements should consider providing a dockerfile and including examples of how it is used.\nLink to bug tracker provided"
  },
  {
    "objectID": "checklist.html#glossary",
    "href": "checklist.html#glossary",
    "title": "SMARTbiomed software development",
    "section": "Glossary",
    "text": "Glossary\n\nAPI - application programming interface\nThis refers to the way that users and other software interact with your software package. It could be using a graphical interface, or using code. It generally refers to the manner of getting your package to do something, and how your package returns a result.\n\n\nVersion control\nThe practice of tracking and managing changes to software code. Version control systems are software tools that help software teams manage changes to source code over time. Examples of version control systems are git and svn.\n\n\nRepository\nA centralized, external storage location for software packages. Examples include github, CRAN, Bioconductor.\n\n\nLicense\nA software license is a document that provides legal guidelines for the use and distribution of software. These is a list of open source licenses here: https://opensource.org/licenses."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SMARTbiomed software development",
    "section": "",
    "text": "Welcome to the developer website for The Pioneer Centre for Statistical and computational Methods for Advanced Research to Transform Biomedicine (SMARTbiomed). A key research output from SMARTbiomed will be software. This website will be the hub for researchers interested in software development who are part of SMARTbiomed. We have a guide for developers, and we also facilitate peer review of software packages.\n\n\n\n\nWe aim to achieve this by\n\nMaking the right data, tools and best practices more discoverable\nCreating social infrastructure through a welcoming and diverse community\n\nOur software peer review program brings together SMARTbiomed scientists to improve the quality, reliability, and maintainability of scientific software packages through an open, constructive, and thorough peer-review process.\n\n\n\n\n\n\nResources for developers\n\n\nHow the review process works\n\n\nSubmit a package for review\n\n\nCode of conduct\n\n\n\n\nCredits\nOur framework and content is heavily influenced by and adapted from rOpenSci\n\n\nContact\nFeel free to reach out by email to: michael.sachs[at]sund.ku.dk"
  },
  {
    "objectID": "index.html#mission",
    "href": "index.html#mission",
    "title": "SMARTbiomed software development",
    "section": "",
    "text": "We aim to achieve this by\n\nMaking the right data, tools and best practices more discoverable\nCreating social infrastructure through a welcoming and diverse community\n\nOur software peer review program brings together SMARTbiomed scientists to improve the quality, reliability, and maintainability of scientific software packages through an open, constructive, and thorough peer-review process."
  },
  {
    "objectID": "index.html#get-started",
    "href": "index.html#get-started",
    "title": "SMARTbiomed software development",
    "section": "",
    "text": "Resources for developers\n\n\nHow the review process works\n\n\nSubmit a package for review\n\n\nCode of conduct\n\n\n\n\nCredits\nOur framework and content is heavily influenced by and adapted from rOpenSci\n\n\nContact\nFeel free to reach out by email to: michael.sachs[at]sund.ku.dk"
  }
]